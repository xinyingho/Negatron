// Generated by jextract

package net.babelsoft.negatron.io.event;

import net.babelsoft.negatron.io.event.input.SDL_PenAxisEvent;
import net.babelsoft.negatron.io.event.input.SDL_PenProximityEvent;
import net.babelsoft.negatron.io.event.input.SDL_PenTouchEvent;
import net.babelsoft.negatron.io.event.input.SDL_PenButtonEvent;
import net.babelsoft.negatron.io.event.input.SDL_PenMotionEvent;
import net.babelsoft.negatron.io.event.input.SDL_TouchFingerEvent;
import net.babelsoft.negatron.io.event.input.SDL_KeyboardDeviceEvent;
import net.babelsoft.negatron.io.event.input.SDL_KeyboardEvent;
import net.babelsoft.negatron.io.event.input.SDL_MouseWheelEvent;
import net.babelsoft.negatron.io.event.input.SDL_MouseMotionEvent;
import net.babelsoft.negatron.io.event.input.SDL_MouseDeviceEvent;
import net.babelsoft.negatron.io.event.input.SDL_MouseButtonEvent;
import net.babelsoft.negatron.io.event.joystick.SDL_JoyHatEvent;
import net.babelsoft.negatron.io.event.gamepad.SDL_GamepadAxisEvent;
import net.babelsoft.negatron.io.event.joystick.SDL_JoyBallEvent;
import net.babelsoft.negatron.io.event.joystick.SDL_JoyBatteryEvent;
import net.babelsoft.negatron.io.event.joystick.SDL_JoyAxisEvent;
import net.babelsoft.negatron.io.event.joystick.SDL_JoyDeviceEvent;
import net.babelsoft.negatron.io.event.gamepad.SDL_GamepadTouchpadEvent;
import net.babelsoft.negatron.io.event.joystick.SDL_JoyButtonEvent;
import net.babelsoft.negatron.io.event.gamepad.SDL_GamepadDeviceEvent;
import net.babelsoft.negatron.io.event.gamepad.SDL_GamepadButtonEvent;
import net.babelsoft.negatron.io.event.gamepad.SDL_GamepadSensorEvent;
import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;
import net.babelsoft.negatron.io.Gamepad;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union SDL_Event {
 *     Uint32 type;
 *     SDL_CommonEvent common;
 *     SDL_DisplayEvent display;
 *     SDL_WindowEvent window;
 *     SDL_KeyboardDeviceEvent kdevice;
 *     SDL_KeyboardEvent key;
 *     SDL_TextEditingEvent edit;
 *     SDL_TextEditingCandidatesEvent edit_candidates;
 *     SDL_TextInputEvent text;
 *     SDL_MouseDeviceEvent mdevice;
 *     SDL_MouseMotionEvent motion;
 *     SDL_MouseButtonEvent button;
 *     SDL_MouseWheelEvent wheel;
 *     SDL_JoyDeviceEvent jdevice;
 *     SDL_JoyAxisEvent jaxis;
 *     SDL_JoyBallEvent jball;
 *     SDL_JoyHatEvent jhat;
 *     SDL_JoyButtonEvent jbutton;
 *     SDL_JoyBatteryEvent jbattery;
 *     SDL_GamepadDeviceEvent gdevice;
 *     SDL_GamepadAxisEvent gaxis;
 *     SDL_GamepadButtonEvent gbutton;
 *     SDL_GamepadTouchpadEvent gtouchpad;
 *     SDL_GamepadSensorEvent gsensor;
 *     SDL_AudioDeviceEvent adevice;
 *     SDL_CameraDeviceEvent cdevice;
 *     SDL_SensorEvent sensor;
 *     SDL_QuitEvent quit;
 *     SDL_UserEvent user;
 *     SDL_TouchFingerEvent tfinger;
 *     SDL_PenProximityEvent pproximity;
 *     SDL_PenTouchEvent ptouch;
 *     SDL_PenMotionEvent pmotion;
 *     SDL_PenButtonEvent pbutton;
 *     SDL_PenAxisEvent paxis;
 *     SDL_DropEvent drop;
 *     SDL_ClipboardEvent clipboard;
 *     Uint8 padding[128];
 * }
 * }
 */
public class SDL_Event {

    SDL_Event() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(Gamepad.C_INT.withName("type"),
        SDL_CommonEvent.layout().withName("common"),
        SDL_DisplayEvent.layout().withName("display"),
        SDL_WindowEvent.layout().withName("window"),
        SDL_KeyboardDeviceEvent.layout().withName("kdevice"),
        SDL_KeyboardEvent.layout().withName("key"),
        SDL_TextEditingEvent.layout().withName("edit"),
        SDL_TextEditingCandidatesEvent.layout().withName("edit_candidates"),
        SDL_TextInputEvent.layout().withName("text"),
        SDL_MouseDeviceEvent.layout().withName("mdevice"),
        SDL_MouseMotionEvent.layout().withName("motion"),
        SDL_MouseButtonEvent.layout().withName("button"),
        SDL_MouseWheelEvent.layout().withName("wheel"),
        SDL_JoyDeviceEvent.layout().withName("jdevice"),
        SDL_JoyAxisEvent.layout().withName("jaxis"),
        SDL_JoyBallEvent.layout().withName("jball"),
        SDL_JoyHatEvent.layout().withName("jhat"),
        SDL_JoyButtonEvent.layout().withName("jbutton"),
        SDL_JoyBatteryEvent.layout().withName("jbattery"),
        SDL_GamepadDeviceEvent.layout().withName("gdevice"),
        SDL_GamepadAxisEvent.layout().withName("gaxis"),
        SDL_GamepadButtonEvent.layout().withName("gbutton"),
        SDL_GamepadTouchpadEvent.layout().withName("gtouchpad"),
        SDL_GamepadSensorEvent.layout().withName("gsensor"),
        SDL_AudioDeviceEvent.layout().withName("adevice"),
        SDL_CameraDeviceEvent.layout().withName("cdevice"),
        SDL_SensorEvent.layout().withName("sensor"),
        SDL_QuitEvent.layout().withName("quit"),
        SDL_UserEvent.layout().withName("user"),
        SDL_TouchFingerEvent.layout().withName("tfinger"),
        SDL_PenProximityEvent.layout().withName("pproximity"),
        SDL_PenTouchEvent.layout().withName("ptouch"),
        SDL_PenMotionEvent.layout().withName("pmotion"),
        SDL_PenButtonEvent.layout().withName("pbutton"),
        SDL_PenAxisEvent.layout().withName("paxis"),
        SDL_DropEvent.layout().withName("drop"),
        SDL_ClipboardEvent.layout().withName("clipboard"),
        MemoryLayout.sequenceLayout(128, Gamepad.C_CHAR).withName("padding")
    ).withName("SDL_Event");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Uint32 type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Uint32 type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Uint32 type
     * }
     */
    public static int type(MemorySegment union) {
        return union.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Uint32 type
     * }
     */
    public static void type(MemorySegment union, int fieldValue) {
        union.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final GroupLayout common$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("common"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_CommonEvent common
     * }
     */
    public static final GroupLayout common$layout() {
        return common$LAYOUT;
    }

    private static final long common$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_CommonEvent common
     * }
     */
    public static final long common$offset() {
        return common$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_CommonEvent common
     * }
     */
    public static MemorySegment common(MemorySegment union) {
        return union.asSlice(common$OFFSET, common$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_CommonEvent common
     * }
     */
    public static void common(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, common$OFFSET, common$LAYOUT.byteSize());
    }

    private static final GroupLayout display$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("display"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_DisplayEvent display
     * }
     */
    public static final GroupLayout display$layout() {
        return display$LAYOUT;
    }

    private static final long display$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_DisplayEvent display
     * }
     */
    public static final long display$offset() {
        return display$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_DisplayEvent display
     * }
     */
    public static MemorySegment display(MemorySegment union) {
        return union.asSlice(display$OFFSET, display$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_DisplayEvent display
     * }
     */
    public static void display(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, display$OFFSET, display$LAYOUT.byteSize());
    }

    private static final GroupLayout window$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("window"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_WindowEvent window
     * }
     */
    public static final GroupLayout window$layout() {
        return window$LAYOUT;
    }

    private static final long window$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_WindowEvent window
     * }
     */
    public static final long window$offset() {
        return window$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_WindowEvent window
     * }
     */
    public static MemorySegment window(MemorySegment union) {
        return union.asSlice(window$OFFSET, window$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_WindowEvent window
     * }
     */
    public static void window(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, window$OFFSET, window$LAYOUT.byteSize());
    }

    private static final GroupLayout kdevice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("kdevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_KeyboardDeviceEvent kdevice
     * }
     */
    public static final GroupLayout kdevice$layout() {
        return kdevice$LAYOUT;
    }

    private static final long kdevice$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_KeyboardDeviceEvent kdevice
     * }
     */
    public static final long kdevice$offset() {
        return kdevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_KeyboardDeviceEvent kdevice
     * }
     */
    public static MemorySegment kdevice(MemorySegment union) {
        return union.asSlice(kdevice$OFFSET, kdevice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_KeyboardDeviceEvent kdevice
     * }
     */
    public static void kdevice(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, kdevice$OFFSET, kdevice$LAYOUT.byteSize());
    }

    private static final GroupLayout key$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_KeyboardEvent key
     * }
     */
    public static final GroupLayout key$layout() {
        return key$LAYOUT;
    }

    private static final long key$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_KeyboardEvent key
     * }
     */
    public static final long key$offset() {
        return key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_KeyboardEvent key
     * }
     */
    public static MemorySegment key(MemorySegment union) {
        return union.asSlice(key$OFFSET, key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_KeyboardEvent key
     * }
     */
    public static void key(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, key$OFFSET, key$LAYOUT.byteSize());
    }

    private static final GroupLayout edit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("edit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_TextEditingEvent edit
     * }
     */
    public static final GroupLayout edit$layout() {
        return edit$LAYOUT;
    }

    private static final long edit$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_TextEditingEvent edit
     * }
     */
    public static final long edit$offset() {
        return edit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_TextEditingEvent edit
     * }
     */
    public static MemorySegment edit(MemorySegment union) {
        return union.asSlice(edit$OFFSET, edit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_TextEditingEvent edit
     * }
     */
    public static void edit(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, edit$OFFSET, edit$LAYOUT.byteSize());
    }

    private static final GroupLayout edit_candidates$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("edit_candidates"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_TextEditingCandidatesEvent edit_candidates
     * }
     */
    public static final GroupLayout edit_candidates$layout() {
        return edit_candidates$LAYOUT;
    }

    private static final long edit_candidates$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_TextEditingCandidatesEvent edit_candidates
     * }
     */
    public static final long edit_candidates$offset() {
        return edit_candidates$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_TextEditingCandidatesEvent edit_candidates
     * }
     */
    public static MemorySegment edit_candidates(MemorySegment union) {
        return union.asSlice(edit_candidates$OFFSET, edit_candidates$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_TextEditingCandidatesEvent edit_candidates
     * }
     */
    public static void edit_candidates(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, edit_candidates$OFFSET, edit_candidates$LAYOUT.byteSize());
    }

    private static final GroupLayout text$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_TextInputEvent text
     * }
     */
    public static final GroupLayout text$layout() {
        return text$LAYOUT;
    }

    private static final long text$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_TextInputEvent text
     * }
     */
    public static final long text$offset() {
        return text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_TextInputEvent text
     * }
     */
    public static MemorySegment text(MemorySegment union) {
        return union.asSlice(text$OFFSET, text$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_TextInputEvent text
     * }
     */
    public static void text(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, text$OFFSET, text$LAYOUT.byteSize());
    }

    private static final GroupLayout mdevice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mdevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_MouseDeviceEvent mdevice
     * }
     */
    public static final GroupLayout mdevice$layout() {
        return mdevice$LAYOUT;
    }

    private static final long mdevice$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_MouseDeviceEvent mdevice
     * }
     */
    public static final long mdevice$offset() {
        return mdevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_MouseDeviceEvent mdevice
     * }
     */
    public static MemorySegment mdevice(MemorySegment union) {
        return union.asSlice(mdevice$OFFSET, mdevice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_MouseDeviceEvent mdevice
     * }
     */
    public static void mdevice(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, mdevice$OFFSET, mdevice$LAYOUT.byteSize());
    }

    private static final GroupLayout motion$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("motion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_MouseMotionEvent motion
     * }
     */
    public static final GroupLayout motion$layout() {
        return motion$LAYOUT;
    }

    private static final long motion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_MouseMotionEvent motion
     * }
     */
    public static final long motion$offset() {
        return motion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_MouseMotionEvent motion
     * }
     */
    public static MemorySegment motion(MemorySegment union) {
        return union.asSlice(motion$OFFSET, motion$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_MouseMotionEvent motion
     * }
     */
    public static void motion(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, motion$OFFSET, motion$LAYOUT.byteSize());
    }

    private static final GroupLayout button$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("button"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_MouseButtonEvent button
     * }
     */
    public static final GroupLayout button$layout() {
        return button$LAYOUT;
    }

    private static final long button$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_MouseButtonEvent button
     * }
     */
    public static final long button$offset() {
        return button$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_MouseButtonEvent button
     * }
     */
    public static MemorySegment button(MemorySegment union) {
        return union.asSlice(button$OFFSET, button$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_MouseButtonEvent button
     * }
     */
    public static void button(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, button$OFFSET, button$LAYOUT.byteSize());
    }

    private static final GroupLayout wheel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("wheel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_MouseWheelEvent wheel
     * }
     */
    public static final GroupLayout wheel$layout() {
        return wheel$LAYOUT;
    }

    private static final long wheel$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_MouseWheelEvent wheel
     * }
     */
    public static final long wheel$offset() {
        return wheel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_MouseWheelEvent wheel
     * }
     */
    public static MemorySegment wheel(MemorySegment union) {
        return union.asSlice(wheel$OFFSET, wheel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_MouseWheelEvent wheel
     * }
     */
    public static void wheel(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, wheel$OFFSET, wheel$LAYOUT.byteSize());
    }

    private static final GroupLayout jdevice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("jdevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_JoyDeviceEvent jdevice
     * }
     */
    public static final GroupLayout jdevice$layout() {
        return jdevice$LAYOUT;
    }

    private static final long jdevice$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_JoyDeviceEvent jdevice
     * }
     */
    public static final long jdevice$offset() {
        return jdevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_JoyDeviceEvent jdevice
     * }
     */
    public static MemorySegment jdevice(MemorySegment union) {
        return union.asSlice(jdevice$OFFSET, jdevice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_JoyDeviceEvent jdevice
     * }
     */
    public static void jdevice(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, jdevice$OFFSET, jdevice$LAYOUT.byteSize());
    }

    private static final GroupLayout jaxis$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("jaxis"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_JoyAxisEvent jaxis
     * }
     */
    public static final GroupLayout jaxis$layout() {
        return jaxis$LAYOUT;
    }

    private static final long jaxis$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_JoyAxisEvent jaxis
     * }
     */
    public static final long jaxis$offset() {
        return jaxis$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_JoyAxisEvent jaxis
     * }
     */
    public static MemorySegment jaxis(MemorySegment union) {
        return union.asSlice(jaxis$OFFSET, jaxis$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_JoyAxisEvent jaxis
     * }
     */
    public static void jaxis(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, jaxis$OFFSET, jaxis$LAYOUT.byteSize());
    }

    private static final GroupLayout jball$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("jball"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_JoyBallEvent jball
     * }
     */
    public static final GroupLayout jball$layout() {
        return jball$LAYOUT;
    }

    private static final long jball$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_JoyBallEvent jball
     * }
     */
    public static final long jball$offset() {
        return jball$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_JoyBallEvent jball
     * }
     */
    public static MemorySegment jball(MemorySegment union) {
        return union.asSlice(jball$OFFSET, jball$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_JoyBallEvent jball
     * }
     */
    public static void jball(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, jball$OFFSET, jball$LAYOUT.byteSize());
    }

    private static final GroupLayout jhat$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("jhat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_JoyHatEvent jhat
     * }
     */
    public static final GroupLayout jhat$layout() {
        return jhat$LAYOUT;
    }

    private static final long jhat$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_JoyHatEvent jhat
     * }
     */
    public static final long jhat$offset() {
        return jhat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_JoyHatEvent jhat
     * }
     */
    public static MemorySegment jhat(MemorySegment union) {
        return union.asSlice(jhat$OFFSET, jhat$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_JoyHatEvent jhat
     * }
     */
    public static void jhat(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, jhat$OFFSET, jhat$LAYOUT.byteSize());
    }

    private static final GroupLayout jbutton$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("jbutton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_JoyButtonEvent jbutton
     * }
     */
    public static final GroupLayout jbutton$layout() {
        return jbutton$LAYOUT;
    }

    private static final long jbutton$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_JoyButtonEvent jbutton
     * }
     */
    public static final long jbutton$offset() {
        return jbutton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_JoyButtonEvent jbutton
     * }
     */
    public static MemorySegment jbutton(MemorySegment union) {
        return union.asSlice(jbutton$OFFSET, jbutton$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_JoyButtonEvent jbutton
     * }
     */
    public static void jbutton(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, jbutton$OFFSET, jbutton$LAYOUT.byteSize());
    }

    private static final GroupLayout jbattery$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("jbattery"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_JoyBatteryEvent jbattery
     * }
     */
    public static final GroupLayout jbattery$layout() {
        return jbattery$LAYOUT;
    }

    private static final long jbattery$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_JoyBatteryEvent jbattery
     * }
     */
    public static final long jbattery$offset() {
        return jbattery$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_JoyBatteryEvent jbattery
     * }
     */
    public static MemorySegment jbattery(MemorySegment union) {
        return union.asSlice(jbattery$OFFSET, jbattery$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_JoyBatteryEvent jbattery
     * }
     */
    public static void jbattery(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, jbattery$OFFSET, jbattery$LAYOUT.byteSize());
    }

    private static final GroupLayout gdevice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gdevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_GamepadDeviceEvent gdevice
     * }
     */
    public static final GroupLayout gdevice$layout() {
        return gdevice$LAYOUT;
    }

    private static final long gdevice$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_GamepadDeviceEvent gdevice
     * }
     */
    public static final long gdevice$offset() {
        return gdevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_GamepadDeviceEvent gdevice
     * }
     */
    public static MemorySegment gdevice(MemorySegment union) {
        return union.asSlice(gdevice$OFFSET, gdevice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_GamepadDeviceEvent gdevice
     * }
     */
    public static void gdevice(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, gdevice$OFFSET, gdevice$LAYOUT.byteSize());
    }

    private static final GroupLayout gaxis$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gaxis"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_GamepadAxisEvent gaxis
     * }
     */
    public static final GroupLayout gaxis$layout() {
        return gaxis$LAYOUT;
    }

    private static final long gaxis$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_GamepadAxisEvent gaxis
     * }
     */
    public static final long gaxis$offset() {
        return gaxis$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_GamepadAxisEvent gaxis
     * }
     */
    public static MemorySegment gaxis(MemorySegment union) {
        return union.asSlice(gaxis$OFFSET, gaxis$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_GamepadAxisEvent gaxis
     * }
     */
    public static void gaxis(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, gaxis$OFFSET, gaxis$LAYOUT.byteSize());
    }

    private static final GroupLayout gbutton$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gbutton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_GamepadButtonEvent gbutton
     * }
     */
    public static final GroupLayout gbutton$layout() {
        return gbutton$LAYOUT;
    }

    private static final long gbutton$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_GamepadButtonEvent gbutton
     * }
     */
    public static final long gbutton$offset() {
        return gbutton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_GamepadButtonEvent gbutton
     * }
     */
    public static MemorySegment gbutton(MemorySegment union) {
        return union.asSlice(gbutton$OFFSET, gbutton$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_GamepadButtonEvent gbutton
     * }
     */
    public static void gbutton(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, gbutton$OFFSET, gbutton$LAYOUT.byteSize());
    }

    private static final GroupLayout gtouchpad$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gtouchpad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_GamepadTouchpadEvent gtouchpad
     * }
     */
    public static final GroupLayout gtouchpad$layout() {
        return gtouchpad$LAYOUT;
    }

    private static final long gtouchpad$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_GamepadTouchpadEvent gtouchpad
     * }
     */
    public static final long gtouchpad$offset() {
        return gtouchpad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_GamepadTouchpadEvent gtouchpad
     * }
     */
    public static MemorySegment gtouchpad(MemorySegment union) {
        return union.asSlice(gtouchpad$OFFSET, gtouchpad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_GamepadTouchpadEvent gtouchpad
     * }
     */
    public static void gtouchpad(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, gtouchpad$OFFSET, gtouchpad$LAYOUT.byteSize());
    }

    private static final GroupLayout gsensor$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gsensor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_GamepadSensorEvent gsensor
     * }
     */
    public static final GroupLayout gsensor$layout() {
        return gsensor$LAYOUT;
    }

    private static final long gsensor$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_GamepadSensorEvent gsensor
     * }
     */
    public static final long gsensor$offset() {
        return gsensor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_GamepadSensorEvent gsensor
     * }
     */
    public static MemorySegment gsensor(MemorySegment union) {
        return union.asSlice(gsensor$OFFSET, gsensor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_GamepadSensorEvent gsensor
     * }
     */
    public static void gsensor(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, gsensor$OFFSET, gsensor$LAYOUT.byteSize());
    }

    private static final GroupLayout adevice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("adevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_AudioDeviceEvent adevice
     * }
     */
    public static final GroupLayout adevice$layout() {
        return adevice$LAYOUT;
    }

    private static final long adevice$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_AudioDeviceEvent adevice
     * }
     */
    public static final long adevice$offset() {
        return adevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_AudioDeviceEvent adevice
     * }
     */
    public static MemorySegment adevice(MemorySegment union) {
        return union.asSlice(adevice$OFFSET, adevice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_AudioDeviceEvent adevice
     * }
     */
    public static void adevice(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, adevice$OFFSET, adevice$LAYOUT.byteSize());
    }

    private static final GroupLayout cdevice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cdevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_CameraDeviceEvent cdevice
     * }
     */
    public static final GroupLayout cdevice$layout() {
        return cdevice$LAYOUT;
    }

    private static final long cdevice$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_CameraDeviceEvent cdevice
     * }
     */
    public static final long cdevice$offset() {
        return cdevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_CameraDeviceEvent cdevice
     * }
     */
    public static MemorySegment cdevice(MemorySegment union) {
        return union.asSlice(cdevice$OFFSET, cdevice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_CameraDeviceEvent cdevice
     * }
     */
    public static void cdevice(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, cdevice$OFFSET, cdevice$LAYOUT.byteSize());
    }

    private static final GroupLayout sensor$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sensor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_SensorEvent sensor
     * }
     */
    public static final GroupLayout sensor$layout() {
        return sensor$LAYOUT;
    }

    private static final long sensor$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_SensorEvent sensor
     * }
     */
    public static final long sensor$offset() {
        return sensor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_SensorEvent sensor
     * }
     */
    public static MemorySegment sensor(MemorySegment union) {
        return union.asSlice(sensor$OFFSET, sensor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_SensorEvent sensor
     * }
     */
    public static void sensor(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, sensor$OFFSET, sensor$LAYOUT.byteSize());
    }

    private static final GroupLayout quit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("quit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_QuitEvent quit
     * }
     */
    public static final GroupLayout quit$layout() {
        return quit$LAYOUT;
    }

    private static final long quit$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_QuitEvent quit
     * }
     */
    public static final long quit$offset() {
        return quit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_QuitEvent quit
     * }
     */
    public static MemorySegment quit(MemorySegment union) {
        return union.asSlice(quit$OFFSET, quit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_QuitEvent quit
     * }
     */
    public static void quit(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, quit$OFFSET, quit$LAYOUT.byteSize());
    }

    private static final GroupLayout user$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("user"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_UserEvent user
     * }
     */
    public static final GroupLayout user$layout() {
        return user$LAYOUT;
    }

    private static final long user$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_UserEvent user
     * }
     */
    public static final long user$offset() {
        return user$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_UserEvent user
     * }
     */
    public static MemorySegment user(MemorySegment union) {
        return union.asSlice(user$OFFSET, user$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_UserEvent user
     * }
     */
    public static void user(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, user$OFFSET, user$LAYOUT.byteSize());
    }

    private static final GroupLayout tfinger$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tfinger"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_TouchFingerEvent tfinger
     * }
     */
    public static final GroupLayout tfinger$layout() {
        return tfinger$LAYOUT;
    }

    private static final long tfinger$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_TouchFingerEvent tfinger
     * }
     */
    public static final long tfinger$offset() {
        return tfinger$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_TouchFingerEvent tfinger
     * }
     */
    public static MemorySegment tfinger(MemorySegment union) {
        return union.asSlice(tfinger$OFFSET, tfinger$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_TouchFingerEvent tfinger
     * }
     */
    public static void tfinger(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, tfinger$OFFSET, tfinger$LAYOUT.byteSize());
    }

    private static final GroupLayout pproximity$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pproximity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_PenProximityEvent pproximity
     * }
     */
    public static final GroupLayout pproximity$layout() {
        return pproximity$LAYOUT;
    }

    private static final long pproximity$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_PenProximityEvent pproximity
     * }
     */
    public static final long pproximity$offset() {
        return pproximity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_PenProximityEvent pproximity
     * }
     */
    public static MemorySegment pproximity(MemorySegment union) {
        return union.asSlice(pproximity$OFFSET, pproximity$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_PenProximityEvent pproximity
     * }
     */
    public static void pproximity(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, pproximity$OFFSET, pproximity$LAYOUT.byteSize());
    }

    private static final GroupLayout ptouch$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ptouch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_PenTouchEvent ptouch
     * }
     */
    public static final GroupLayout ptouch$layout() {
        return ptouch$LAYOUT;
    }

    private static final long ptouch$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_PenTouchEvent ptouch
     * }
     */
    public static final long ptouch$offset() {
        return ptouch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_PenTouchEvent ptouch
     * }
     */
    public static MemorySegment ptouch(MemorySegment union) {
        return union.asSlice(ptouch$OFFSET, ptouch$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_PenTouchEvent ptouch
     * }
     */
    public static void ptouch(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, ptouch$OFFSET, ptouch$LAYOUT.byteSize());
    }

    private static final GroupLayout pmotion$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pmotion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_PenMotionEvent pmotion
     * }
     */
    public static final GroupLayout pmotion$layout() {
        return pmotion$LAYOUT;
    }

    private static final long pmotion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_PenMotionEvent pmotion
     * }
     */
    public static final long pmotion$offset() {
        return pmotion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_PenMotionEvent pmotion
     * }
     */
    public static MemorySegment pmotion(MemorySegment union) {
        return union.asSlice(pmotion$OFFSET, pmotion$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_PenMotionEvent pmotion
     * }
     */
    public static void pmotion(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, pmotion$OFFSET, pmotion$LAYOUT.byteSize());
    }

    private static final GroupLayout pbutton$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pbutton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_PenButtonEvent pbutton
     * }
     */
    public static final GroupLayout pbutton$layout() {
        return pbutton$LAYOUT;
    }

    private static final long pbutton$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_PenButtonEvent pbutton
     * }
     */
    public static final long pbutton$offset() {
        return pbutton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_PenButtonEvent pbutton
     * }
     */
    public static MemorySegment pbutton(MemorySegment union) {
        return union.asSlice(pbutton$OFFSET, pbutton$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_PenButtonEvent pbutton
     * }
     */
    public static void pbutton(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, pbutton$OFFSET, pbutton$LAYOUT.byteSize());
    }

    private static final GroupLayout paxis$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("paxis"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_PenAxisEvent paxis
     * }
     */
    public static final GroupLayout paxis$layout() {
        return paxis$LAYOUT;
    }

    private static final long paxis$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_PenAxisEvent paxis
     * }
     */
    public static final long paxis$offset() {
        return paxis$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_PenAxisEvent paxis
     * }
     */
    public static MemorySegment paxis(MemorySegment union) {
        return union.asSlice(paxis$OFFSET, paxis$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_PenAxisEvent paxis
     * }
     */
    public static void paxis(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, paxis$OFFSET, paxis$LAYOUT.byteSize());
    }

    private static final GroupLayout drop$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("drop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_DropEvent drop
     * }
     */
    public static final GroupLayout drop$layout() {
        return drop$LAYOUT;
    }

    private static final long drop$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_DropEvent drop
     * }
     */
    public static final long drop$offset() {
        return drop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_DropEvent drop
     * }
     */
    public static MemorySegment drop(MemorySegment union) {
        return union.asSlice(drop$OFFSET, drop$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_DropEvent drop
     * }
     */
    public static void drop(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, drop$OFFSET, drop$LAYOUT.byteSize());
    }

    private static final GroupLayout clipboard$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("clipboard"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_ClipboardEvent clipboard
     * }
     */
    public static final GroupLayout clipboard$layout() {
        return clipboard$LAYOUT;
    }

    private static final long clipboard$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_ClipboardEvent clipboard
     * }
     */
    public static final long clipboard$offset() {
        return clipboard$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_ClipboardEvent clipboard
     * }
     */
    public static MemorySegment clipboard(MemorySegment union) {
        return union.asSlice(clipboard$OFFSET, clipboard$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_ClipboardEvent clipboard
     * }
     */
    public static void clipboard(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, clipboard$OFFSET, clipboard$LAYOUT.byteSize());
    }

    private static final SequenceLayout padding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Uint8 padding[128]
     * }
     */
    public static final SequenceLayout padding$layout() {
        return padding$LAYOUT;
    }

    private static final long padding$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Uint8 padding[128]
     * }
     */
    public static final long padding$offset() {
        return padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Uint8 padding[128]
     * }
     */
    public static MemorySegment padding(MemorySegment union) {
        return union.asSlice(padding$OFFSET, padding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Uint8 padding[128]
     * }
     */
    public static void padding(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, padding$OFFSET, padding$LAYOUT.byteSize());
    }

    private static long[] padding$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * Uint8 padding[128]
     * }
     */
    public static long[] padding$dimensions() {
        return padding$DIMS;
    }
    private static final VarHandle padding$ELEM_HANDLE = padding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * Uint8 padding[128]
     * }
     */
    public static byte padding(MemorySegment union, long index0) {
        return (byte)padding$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * Uint8 padding[128]
     * }
     */
    public static void padding(MemorySegment union, long index0, byte fieldValue) {
        padding$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

