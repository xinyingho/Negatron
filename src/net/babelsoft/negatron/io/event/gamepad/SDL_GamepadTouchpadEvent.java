// Generated by jextract

package net.babelsoft.negatron.io.event.gamepad;

import java.lang.foreign.*;
import java.util.function.*;
import net.babelsoft.negatron.io.Gamepad;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SDL_GamepadTouchpadEvent {
 *     SDL_EventType type;
 *     Uint32 reserved;
 *     Uint64 timestamp;
 *     SDL_JoystickID which;
 *     Sint32 touchpad;
 *     Sint32 finger;
 *     float x;
 *     float y;
 *     float pressure;
 * }
 * }
 */
public class SDL_GamepadTouchpadEvent {

    SDL_GamepadTouchpadEvent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(Gamepad.C_INT.withName("type"),
        Gamepad.C_INT.withName("reserved"),
        Gamepad.C_LONG_LONG.withName("timestamp"), /**< In nanoseconds, populated using SDL_GetTicksNS() */Gamepad.C_INT.withName("which"), /**< The joystick instance id */Gamepad.C_INT.withName("touchpad"), /**< The index of the touchpad */Gamepad.C_INT.withName("finger"), /**< The index of the finger on the touchpad */Gamepad.C_FLOAT.withName("x"), /**< Normalized in the range 0...1 with 0 being on the left */Gamepad.C_FLOAT.withName("y"), /**< Normalized in the range 0...1 with 0 being at the top */Gamepad.C_FLOAT.withName("pressure") /**< Normalized in the range 0...1 */
    ).withName("SDL_GamepadTouchpadEvent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_EventType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_EventType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_EventType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_EventType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Uint32 reserved
     * }
     */
    public static final OfInt reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Uint32 reserved
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Uint32 reserved
     * }
     */
    public static int reserved(MemorySegment struct) {
        return struct.get(reserved$LAYOUT, reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Uint32 reserved
     * }
     */
    public static void reserved(MemorySegment struct, int fieldValue) {
        struct.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
    }

    private static final OfLong timestamp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Uint64 timestamp
     * }
     */
    public static final OfLong timestamp$layout() {
        return timestamp$LAYOUT;
    }

    private static final long timestamp$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Uint64 timestamp
     * }
     */
    public static final long timestamp$offset() {
        return timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Uint64 timestamp
     * }
     */
    public static long timestamp(MemorySegment struct) {
        return struct.get(timestamp$LAYOUT, timestamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Uint64 timestamp
     * }
     */
    public static void timestamp(MemorySegment struct, long fieldValue) {
        struct.set(timestamp$LAYOUT, timestamp$OFFSET, fieldValue);
    }

    private static final OfInt which$LAYOUT = (OfInt)$LAYOUT.select(groupElement("which"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SDL_JoystickID which
     * }
     */
    public static final OfInt which$layout() {
        return which$LAYOUT;
    }

    private static final long which$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SDL_JoystickID which
     * }
     */
    public static final long which$offset() {
        return which$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SDL_JoystickID which
     * }
     */
    public static int which(MemorySegment struct) {
        return struct.get(which$LAYOUT, which$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SDL_JoystickID which
     * }
     */
    public static void which(MemorySegment struct, int fieldValue) {
        struct.set(which$LAYOUT, which$OFFSET, fieldValue);
    }

    private static final OfInt touchpad$LAYOUT = (OfInt)$LAYOUT.select(groupElement("touchpad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Sint32 touchpad
     * }
     */
    public static final OfInt touchpad$layout() {
        return touchpad$LAYOUT;
    }

    private static final long touchpad$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Sint32 touchpad
     * }
     */
    public static final long touchpad$offset() {
        return touchpad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Sint32 touchpad
     * }
     */
    public static int touchpad(MemorySegment struct) {
        return struct.get(touchpad$LAYOUT, touchpad$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Sint32 touchpad
     * }
     */
    public static void touchpad(MemorySegment struct, int fieldValue) {
        struct.set(touchpad$LAYOUT, touchpad$OFFSET, fieldValue);
    }

    private static final OfInt finger$LAYOUT = (OfInt)$LAYOUT.select(groupElement("finger"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Sint32 finger
     * }
     */
    public static final OfInt finger$layout() {
        return finger$LAYOUT;
    }

    private static final long finger$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Sint32 finger
     * }
     */
    public static final long finger$offset() {
        return finger$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Sint32 finger
     * }
     */
    public static int finger(MemorySegment struct) {
        return struct.get(finger$LAYOUT, finger$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Sint32 finger
     * }
     */
    public static void finger(MemorySegment struct, int fieldValue) {
        struct.set(finger$LAYOUT, finger$OFFSET, fieldValue);
    }

    private static final OfFloat x$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float x
     * }
     */
    public static final OfFloat x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float x
     * }
     */
    public static float x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float x
     * }
     */
    public static void x(MemorySegment struct, float fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfFloat y$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float y
     * }
     */
    public static final OfFloat y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float y
     * }
     */
    public static float y(MemorySegment struct) {
        return struct.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float y
     * }
     */
    public static void y(MemorySegment struct, float fieldValue) {
        struct.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    private static final OfFloat pressure$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("pressure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float pressure
     * }
     */
    public static final OfFloat pressure$layout() {
        return pressure$LAYOUT;
    }

    private static final long pressure$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float pressure
     * }
     */
    public static final long pressure$offset() {
        return pressure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float pressure
     * }
     */
    public static float pressure(MemorySegment struct) {
        return struct.get(pressure$LAYOUT, pressure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float pressure
     * }
     */
    public static void pressure(MemorySegment struct, float fieldValue) {
        struct.set(pressure$LAYOUT, pressure$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

